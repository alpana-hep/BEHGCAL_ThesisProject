/*
g++ -Wall -Icommon/inc src/RelayCheck.cpp -Ioffline/inc -o bin/RelayCheck.exe -lyaml-cpp -lhdf5_cpp -lhdf5 `root-config --libs --cflags`
*/

#include <iostream>
#include <iomanip>
#include <cassert>

#include <yaml-cpp/yaml.h>

#include "RelayReader.h"
#include "EcontEnergies.h"
#include "TFile.h"
#include "TH1I.h"
#include "TH1F.h"
#include "TH1D.h"
#include "TH2D.h"
#include "EcondHeader.h"
#include "EcondSubHeader.h"
//#include "ROOT.h"
//#include "TH1.h"
// void econtEnergies(const uint64_t *p, std::vector<uint16_t> &v) {
//   v.resize(24);

//   uint64_t e0,e1;
  
//   e0=p[0]<<32|(p[1]&0xffffffff);
//   e1=p[1]<<48|(p[2]&0xffffffff)<<16|(p[3]&0xffffffff)>>16;
//   //std::cout << "e0,e1 = " << std::hex << e0 << "," << e1 << std::endl;
  
//   v[ 0]=(e0>> 1)&0x7f;
//   v[ 1]=(e0>> 8)&0x7f;
//   v[ 2]=(e0>>15)&0x7f;
//   v[ 3]=(e0>>22)&0x7f;
//   v[ 4]=(e0>>29)&0x7f;
  
//   v[ 5]=(e1    )&0x7f;
//   v[ 6]=(e1>> 7)&0x7f;
//   v[ 7]=(e1>>14)&0x7f;
//   v[ 8]=(e1>>21)&0x7f;
//   v[ 9]=(e1>>28)&0x7f;
//   v[10]=(e1>>35)&0x7f;
//   v[11]=(e1>>42)&0x7f;
  
//   e0=(p[0]&0xffffffff00000000)    |(p[1]&0xffffffff00000000)>>32;
//   e1=(p[1]&0xffffffff00000000)<<16|(p[2]&0xffffffff00000000)>>16|(p[3]&0xffffffff00000000)>>48;
//   //std::cout << "e0,e1 = " << std::hex << e0 << "," << e1 << std::endl;
  
//   v[12]=(e0>> 1)&0x7f;
//   v[13]=(e0>> 8)&0x7f;
//   v[14]=(e0>>15)&0x7f;
//   v[15]=(e0>>22)&0x7f;
//   v[16]=(e0>>29)&0x7f;
  
//   v[17]=(e1    )&0x7f;
//   v[18]=(e1>> 7)&0x7f;
//   v[19]=(e1>>14)&0x7f;
//   v[20]=(e1>>21)&0x7f;
//   v[21]=(e1>>28)&0x7f;
//   v[22]=(e1>>35)&0x7f;
//   v[23]=(e1>>42)&0x7f;
// }

// void unpackerEnergies(const uint64_t *p, std::vector<uint16_t> &v) {
//   v.resize(24);

//   for(unsigned i(0);i<6;i++) {
//     v[2*i   ]=(p[i]    )&0x7f;
//     v[2*i+ 1]=(p[i]>>13)&0x7f;
//     v[2*i+12]=(p[i]>>32)&0x7f;
//     v[2*i+13]=(p[i]>>45)&0x7f;
//   }
// }

int main(int argc, char** argv) {
  if(argc<2) {
    std::cerr << argv[0] << ": No relay number specified" << std::endl;
    return 1;
  }

  uint32_t relayNumber(0);
  std::istringstream issRelay(argv[1]);
  issRelay >> relayNumber;
  std::ofstream myfile_all;
  myfile_all.open("relay_BX_orbitL1As.txt");
  //1695126523
  // root file to store the hist output
  TFile* fout = new TFile("Relay_check_SlinkHeader_1695656599_link1.root","RECREATE");
  // TH1D* h_validPattern_EoE;
  // TH1D* h_validPattern_BoE;

  // TH1D* h_eventLength;
  // TH1D* h_Flag_inEvent; // see if events are increasing by 1 (event counter is not jumping suddenly)
  // TH1D* h_BXnumber; 
  // TH1D* h_Econd_status;
  // TH1D* h_CRCflag;
  // TH1D* h_DAQCRCvsCRC; //see if DAQ CRC matches with Slink CRC
  std::cout<<"Is it working?? NO  "<<std::endl;

  TH1D* h_validPattern_EoE = new TH1D("h_validPattern_EOE","==1 if valid pattern for EOE",2,0,2);
  TH1D* h_validPattern_BoE = new TH1D("h_validPattern_BOE","==1 if valid pattern for BOE",2,0,2);
  
  TH1D* h_eventLength = new TH1D("h_eventLength","Event length (128 bit words)" ,200,0,200);
  TH1D* h_Flag_inEvent = new TH1D("h_Flag_inEvent","==1 if Events are incremented by 1 else 0",2,0,2);
  TH1D* h_BXnumber = new TH1D("h_BXnumber"," BX number (0 to 3564)",3565,0,3565);
  TH1D* h_Econd_status = new TH1D("h_Econd_status","Status of ECON-D: should be '0'",10,0,10);
  TH1D* h_CRCflag = new TH1D("h_CRCflag","CRC flag",2,0,2);
  TH1D* h_DAQCRCvsCRC = new TH1D("h_DAQCRCvsCRC","DAQ CRC vs Slink CRC",2,0,2);
  TH1D* h_eventCounter = new TH1D("h_eventCounter","Event counter",11000,0,220000000);
  TH1D* h_orbCounter = new TH1D("h_orbCounter","Orbit counter",10000,0,10000);
  TH2D* h_EcondSta_vsBX = new TH2D("h_EcondSta_vsBX","ECON-D status vs BX",11000,0,220000000,10,0,10);
  TH2D* h_EcondSta_vsBXcounter = new TH2D("h_EcondSta_vsBXcounter","ECON-D status vs BX", 4000,0,4000,10,0,10);
  TH2D* h_EcondSta_vsEventcounter = new TH2D("h_EcondSta_vsEventcounter","ECON-D status vs Event ID counter",22000,0,220000000,10,0,10);
  TH2D *h_eventLength_vsBXcounter = new TH2D("h_eventLength_vsBXcounter","Event Lengths vs BX counter",4000,0, 4000,100,0,100);
  TH2D *h_eventLength_vsECONDStatus = new TH2D("h_eventLength_vsECONDStatus","Event length vs ECOND status",100,0,100,10,0,10);
  //  TH2D* h_eventLength_vsEventCounter = new TH2D("h_eventLength_vsEventCounter","Event length vs Event Counter",1000,0,1000,100,0,100);
  
 TH2D* h_eventCounter_SLinkvsDAQ = new TH2D ("h_eventCounter_SLinkvsDAQ","Event counter in Slink vs DAQ",100,0,100,100,0,100);
  TH2D* h_BXCounter_SLinkvsDAQ = new TH2D("h_BXCounter_SLinkvsDAQ"," BX counter in Slink vs DAQ",4000,0,4000,4000,0,4000);
  TH2D* h_OrbCOunter_SLinkvsDAQ = new TH2D("h_OrbCOunter_SLinkvsDAQ","Orb counter in SLink vs DAQ",10,0,10,10,0,10);
  TH2D* h_eventCounter_SLinkvsDAQ_EconStatus5 = new TH2D ("h_eventCounter_SLinkvsDAQ_EconStatus5","Slink vs DAQ event counter for events with ECON-D status 5",100,0,100,100,0,100);//11000,0,220000000,11000,0,220000000);
  TH2D* h_BXCounter_SLinkvsDAQ_EconStatus5 = new TH2D ("h_BXCounter_SLinkvsDAQ_EconStatus5","Slink vs DAQ BX counter for BXs with ECON-D status 5",4000,0,4000,4000,0,4000);
  TH2D* h_OrbCounter_SLinkvsDAQ_EconStatus5 = new TH2D ("h_OrbCounter_SLinkvsDAQ_EconStatus5","Slink vs DAQ Orb counter for Orbs with ECON-D status 5",100,0,100,100,0,100);//1000,0,10000,1000,0,10000);
  TH2D* h_eventCounter_SLinkvsDAQ_EconStatus4 = new TH2D ("h_eventCounter_SLinkvsDAQ_EconStatus4","Slink vs DAQ event counter for events with ECON-D status 4",100,0,100,100,0,100);//1000,0,10000,1000,0,10000);
  TH2D* h_BXCounter_SLinkvsDAQ_EconStatus4 = new TH2D ("h_BXCounter_SLinkvsDAQ_EconStatus4","Slink vs DAQ BX counter for BXs with ECON-D status 4",4000,0,4000,4000,0,4000);
  TH2D* h_OrbCounter_SLinkvsDAQ_EconStatus4 = new TH2D ("h_OrbCounter_SLinkvsDAQ_EconStatus4","Slink vs DAQ Orb counter for Orbs with ECON-D status 4",100,0,100,100,0,100);
  TH2D* h_eventCounter_SLinkvsDAQ_EvenLength1 = new TH2D ("h_eventCounter_SLinkvsDAQ_EvenLength1","Slink vs DAQ event counter for for events with packet length -3",100,0,100,100,0,100);
TH2D* h_BXCounter_SLinkvsDAQ_EvenLength1 = new TH2D ("h_BXCounter_SLinkvsDAQ_EvenLength1","Slink vs DAQ BX counter for BXs for events with packet length -3",4000,0,4000,4000,0,4000);
  TH2D* h_OrbCounter_SLinkvsDAQ_EvenLength1 = new TH2D ("h_OrbCounter_SLinkvsDAQ_EvenLength1","Slink vs DAQ Orb counter for Orbs for events with packet length -3",100,0,100,100,0,100);
  TH2D* h_eventCounter_SLinkvsDAQ_EconStatus3 = new TH2D ("h_eventCounter_SLinkvsDAQ_EconStatus3","Slink vs DAQ event counter for events with ECON-D status 3",100,0,100,100,0,100);//1000,0,10000,1000,0,10000);                                                                                                                         
  TH2D* h_BXCounter_SLinkvsDAQ_EconStatus3 = new TH2D ("h_BXCounter_SLinkvsDAQ_EconStatus3","Slink vs DAQ BX counter for BXs with ECON-D status 3",4000,0,4000,4000,0,4000);
  TH2D* h_OrbCounter_SLinkvsDAQ_EconStatus3 = new TH2D ("h_OrbCounter_SLinkvsDAQ_EconStatus3","Slink vs DAQ Orb counter for Orbs with ECON-D status 3",100,0,100,100,0,100);
  TH2D* h_eventCounter_ECONDvsSlink = new TH2D("h_eventCounter_ECONDvsSlink","Event counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_eventCounter_ECONDvsDaq = new TH2D("h_eventCounter_ECONDvsDaq","Event counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsSlink = new TH2D("h_orbitCounter_ECONDvsSlink","Orbit counters for ECOND vs Slink",10,0,10,10,0,10);
  TH2D* h_orbitCounter_ECONDvsDaq = new TH2D("h_orbitCounter_ECONDvsDaq","Orbit counters for ECOND vs Daq",10,0,10,10,0,10);
  TH2D* h_bxCounter_ECONDvsSlink = new TH2D("h_bxCounter_ECONDvsSlink","Bx counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_bxCounter_ECONDvsDaq = new TH2D("h_bxCounter_ECONDvsDaq","Bx counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_payLoadLengthvsEventCounter_ECOND = new TH2D("h_payLoadLengthvsEventCounter_ECOND","payload length (32 bit words) vs Event ID;Event ID; payload length (32 bit words)",11000,0,22000000,300,0,300);
  TH1D* h_payLoadLengthECOND = new TH1D("h_payLoadLengthECOND"," payload length (32 bit words)",300,0,300);
  TH1D* h_flagE = new TH1D("h_flagE","Whether the packet was expected from the HGCROC ;E()",10,0,10);
  TH1D* h_HT = new TH1D("h_HT",";HT()",5,0,5);
  TH1D* h_EBO = new TH1D("h_EBO",";EBO",5,0,5);
  TH1D* h_M =	new TH1D("h_M",";M",2,0,2);
  TH1D* h_ifTruncation = new TH1D("h_ifTruncation",";truncation",2,0,2);
  TH1D* h_passThruMode = new TH1D("h_passThruMode",";pass thru mode",4,0,4);
  TH1D* h_CRC_ECOND = new TH1D("h_CRC_ECOND",";CRC() for event header at econd",300,0,300);
  TH1D* h_valid_econd = new TH1D("h_valid_econd",";valid econd packet",2,0,2);
  TH1D* h_StaBit_status = new TH1D("h_StaBit_status",";S",2,0,2);
  TH1D*  h_subStat_Status = new TH1D("h_subStat_Status","sub packet stat bit status",10,0,10);
  TH1D* h_subStat_HT = new TH1D("h_subStat_HT",";eRx matches transmitted HT",2,0,2);
  TH1D* h_subStat_EBO = new TH1D("h_subStat_EBO",";eRx matches transmitted EBO",2,0,2);
  TH1D* h_subStat_halfROC_CRC = new TH1D("h_subStat_halfROC_CRC",";Result of halfROC CRC",2,0,2);
  TH1D* h_resetRequest_ECOND = new TH1D("h_resetRequest_ECOND",";reset request",2,0,2);
  TH1D* h_formateRx_subPacket = new TH1D("h_formateRx_subPacket",";formateRx_subPacket",2,0,2);

  TH2D* h_eventCounter_ECONDvsSlink_EcondStatus5 = new TH2D("h_eventCounter_ECONDvsSlink_EcondStatus5","Event counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_eventCounter_ECONDvsDaq_EcondStatus5 = new TH2D("h_eventCounter_ECONDvsDaq_EcondStatus5","Event counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsSlink_EcondStatus5 = new TH2D("h_orbitCounter_ECONDvsSlink_EcondStatus5","Orbit counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsDaq_EcondStatus5 = new TH2D("h_orbitCounter_ECONDvsDaq_EcondStatus5","Orbit counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_bxCounter_ECONDvsSlink_EcondStatus5 = new TH2D("h_bxCounter_ECONDvsSlink_EcondStatus5","Bx counters for ECOND vs Slink",4000,0,4000,4000,0,4000);
  TH2D* h_bxCounter_ECONDvsDaq_EcondStatus5 = new TH2D("h_bxCounter_ECONDvsDaq_EcondStatus5","Bx counters for ECOND vs Daq",4000,0,4000,4000,0,4000);

   TH2D* h_eventCounter_ECONDvsSlink_EcondStatus4 = new TH2D("h_eventCounter_ECONDvsSlink_EcondStatus4","Event counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_eventCounter_ECONDvsDaq_EcondStatus4 = new TH2D("h_eventCounter_ECONDvsDaq_EcondStatus4","Event counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsSlink_EcondStatus4 = new TH2D("h_orbitCounter_ECONDvsSlink_EcondStatus4","Orbit counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsDaq_EcondStatus4 = new TH2D("h_orbitCounter_ECONDvsDaq_EcondStatus4","Orbit counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_bxCounter_ECONDvsSlink_EcondStatus4 = new TH2D("h_bxCounter_ECONDvsSlink_EcondStatus4","Bx counters for ECOND vs Slink",4000,0,4000,4000,0,4000);
  TH2D* h_bxCounter_ECONDvsDaq_EcondStatus4 = new TH2D("h_bxCounter_ECONDvsDaq_EcondStatus4","Bx counters for ECOND vs Daq",4000,0,4000,4000,0,4000);

   TH2D* h_eventCounter_ECONDvsSlink_EcondStatus3 = new TH2D("h_eventCounter_ECONDvsSlink_EcondStatus3","Event counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_eventCounter_ECONDvsDaq_EcondStatus3 = new TH2D("h_eventCounter_ECONDvsDaq_EcondStatus3","Event counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsSlink_EcondStatus3 = new TH2D("h_orbitCounter_ECONDvsSlink_EcondStatus3","Orbit counters for ECOND vs Slink",100,0,100,100,0,100);
  TH2D* h_orbitCounter_ECONDvsDaq_EcondStatus3 = new TH2D("h_orbitCounter_ECONDvsDaq_EcondStatus3","Orbit counters for ECOND vs Daq",100,0,100,100,0,100);
  TH2D* h_bxCounter_ECONDvsSlink_EcondStatus3 = new TH2D("h_bxCounter_ECONDvsSlink_EcondStatus3","Bx counters for ECOND vs Slink",4000,0,4000,4000,0,4000);
  TH2D* h_bxCounter_ECONDvsDaq_EcondStatus3 = new TH2D("h_bxCounter_ECONDvsDaq_EcondStatus3","Bx counters for ECOND vs Daq",4000,0,4000,4000,0,4000);

  std::cout<<"Is it working??  "<<std::endl;

  if(relayNumber==0) {
    std::cerr << argv[0] << ": Relay number uninterpretable" << std::endl;
    return 2;
  }

  // Create the file reader
  Hgcal10gLinkReceiver::RelayReader _relayReader;
  _relayReader.enableLink(0,false);
  _relayReader.enableLink(1,true);
  _relayReader.enableLink(2,false);
  _relayReader.openRelay(relayNumber);
  
  // Make the buffer space for the records and some useful casts for configuration and event records
  Hgcal10gLinkReceiver::RecordT<16*4096-1> *rxxx(new Hgcal10gLinkReceiver::RecordT<16*4096-1>);
  Hgcal10gLinkReceiver::RecordYaml *rCfg((Hgcal10gLinkReceiver::RecordYaml*)rxxx);
  Hgcal10gLinkReceiver::RecordRunning *rEvent((Hgcal10gLinkReceiver::RecordRunning*)rxxx);

  unsigned nEvents(0);
  unsigned ncount_boe(0);
  unsigned ncount_eoe(0);                                                                                                                                            unsigned  ncount_bxID(0);
 unsigned ncount_econdStat(0);
  unsigned event_IDCounter(0);
  unsigned ncount_eventLength(0);  
  unsigned event_flag(1);
  unsigned counter_print(0);
  unsigned counter_print1(0);
  unsigned orbit_mismatch(0);
  unsigned bx_mismatch(0);
  unsigned eve_mismatch(0);
  unsigned counter_print2(0);
  unsigned counter_print3(0);
  unsigned counter_print4(0);
  unsigned counter_print5(0);
  unsigned counter_print6(0);
  unsigned ncount_bx_econd(0);
  unsigned ncount_econd_M(0);  
  bool flag_toPrint(0);
  
  while(_relayReader.read(rxxx)) {
    if(rxxx->state()!=Hgcal10gLinkReceiver::FsmState::Running) {
      //rxxx->print();
      if(rxxx->state()==Hgcal10gLinkReceiver::FsmState::Configuration) {
	// std::cout<<"rCfg->string()  "<<rCfg->string()<<std::endl;
	YAML::Node n(YAML::Load(rCfg->string()));
	
	      if(n["Source"].as<std::string>()=="Serenity") {
      	}
	      if(n["Source"].as<std::string>()=="TCDS2") {
	      }
      }
      // else
      // 	rxxx->print();
    } else {
      
      nEvents++;
      char* line = new char[100];
      // Access the Slink header ("begin-of-event")
      // This should always be present; check pattern is correct
      const Hgcal10gLinkReceiver::SlinkBoe *b(rEvent->slinkBoe());
      const Hgcal10gLinkReceiver::SlinkEoe *e(rEvent->slinkEoe());
      //const Hgcal10gLinkReceiver::EcondHeader *econd(rEvent->econdHeader());
      const Hgcal10gLinkReceiver::BePacketHeader *be(rEvent->bePacketHeader());
      const uint64_t *p64(((const uint64_t*)rEvent)+1);
      const Hgcal10gLinkReceiver::EcondHeader *econd((const Hgcal10gLinkReceiver::EcondHeader *)(p64+3) ); 
      const Hgcal10gLinkReceiver::EcondSubHeader* econd_sub((const Hgcal10gLinkReceiver::EcondSubHeader*) (p64+4));
      if(nEvents<=10) {
        b->print();
        e->print();
        be->print();
	econd->print();
	econd_sub->print();
	rEvent->print();	
        sprintf(line,"%d %d %d %d\n",int(b->eventId()),int(e->bxId()),int(e->orbitId()),int(e->totalBx()));
	myfile_all<<line;
        for(unsigned i(0);i<rEvent->payloadLength();i++) {

                std::cout << "Word " << std::setw(3) << i << " ";
                std::cout << std::hex << std::setfill('0');
                std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
                std::cout << std::dec << std::setfill(' ');  
              }
	std::cout << std::endl;
      }
      assert(b!=nullptr);
      if(!b->validPattern()) {
      	std::cout<< "invalid pattern for BOE"<<std::endl;
      	b->print();
	e->print(); 
	be->print();
	econd->print();
        econd_sub->print();
      	ncount_boe++;
      	//assert(ncount_boe<50);
      }
      
      // Access the Slink trailer ("end-of-event")
      // This should always be present; check pattern is correct
      //const Hgcal10gLinkReceiver::SlinkEoe *e(rEvent->slinkEoe());
      assert(e!=nullptr);
      if(!e->validPattern()){
      	 ncount_eoe++;
      	 std::cout<< "invalid pattern for EOE"<<std::endl;
	 b->print();
	 e->print();
      	 be->print();
	 econd->print();
	 econd_sub->print();
      	 //assert(ncount_eoe<50);                                                                                                                                           
      }      
      if(e->bxId()==0 || e->bxId()>3564){
	std::cout<< "invalid bxID()"<<std::endl;
	b->print();
	e->print();
	be->print();
	econd->print();
        econd_sub->print();
	ncount_bxID++;
      }
      if(econd->bx()==0 || econd->bx()>3564){
	std::cout<< "invalid bxID() at the econd level"<<std::endl;
        b->print();
        e->print();
        be->print();
	econd->print();
        econd_sub->print();
	ncount_bx_econd++;
      }
      h_eventCounter->Fill(b->eventId());
      h_orbCounter->Fill(e->orbitId());
      h_eventLength->Fill(e->eventLength());
      h_validPattern_EoE->Fill(e->validPattern());
      h_validPattern_BoE->Fill(b->validPattern());
      h_BXnumber->Fill(e->bxId());
      h_CRCflag->Fill(e->crc());
      h_DAQCRCvsCRC->Fill(e->crc()==e->daqCrc());
      unsigned SLink_Orbit_counter(0);
      unsigned SLink_eve_counter(0);
      SLink_Orbit_counter = (e->orbitId()%8);
      SLink_eve_counter = (b->eventId()%64);
      h_BXCounter_SLinkvsDAQ->Fill(e->bxId(),be->bunchCounter());
      h_eventCounter_SLinkvsDAQ->Fill(SLink_eve_counter,be->eventCounter());
      h_OrbCOunter_SLinkvsDAQ->Fill(SLink_Orbit_counter,be->orbitCounter());
      //filling econd variable only if good things are here
      if(unsigned(be->econdStatus(0))==0 && e->eventLength()==62){
      h_eventCounter_ECONDvsSlink->Fill(SLink_eve_counter,econd->event());
      h_eventCounter_ECONDvsDaq->Fill(be->eventCounter(),econd->event());
      h_orbitCounter_ECONDvsSlink->Fill(SLink_Orbit_counter,econd->orbit());
      h_orbitCounter_ECONDvsDaq->Fill(be->orbitCounter(),econd->orbit());
      h_bxCounter_ECONDvsSlink->Fill(e->bxId(),econd->bx());
      h_bxCounter_ECONDvsDaq->Fill(be->bunchCounter(),econd->bx());
      h_payLoadLengthvsEventCounter_ECOND->Fill(b->eventId(),econd->totalPacketLength());
      h_payLoadLengthECOND->Fill(econd->totalPacketLength());
      h_flagE->Fill(econd->qualityFlagE());
      h_HT->Fill(econd->qualityFlagHT());
      h_EBO->Fill(econd->qualityFlagEBO());
      if(econd->qualityFlagM())
	h_M->Fill(1);//int(econd->qualityFlagM()));
      else //if(!econd->qualityFlagM())
	h_M->Fill(0);
	
      h_ifTruncation->Fill(econd->truncated());
      h_passThruMode->Fill(econd->passthroughMode());
      h_CRC_ECOND->Fill(econd->crc());
      h_valid_econd->Fill(econd->validCrc());
      h_StaBit_status->Fill(econd->subpacketError());
      //calculating individual stat bits;
      h_subStat_HT->Fill(econd_sub->status_HT());
      h_subStat_EBO->Fill(econd_sub->status_EBO());
      h_subStat_halfROC_CRC->Fill(econd_sub->status_ROC_crc());
      h_subStat_Status->Fill(econd_sub->status());
      h_resetRequest_ECOND->Fill(econd->resetRequest());
      h_formateRx_subPacket->Fill(econd_sub->format());
      
      if(econd->qualityFlagM())
	{bool temp = false;
	  
	  std::cout<< "Milos Test M is  "<<"\t"<<econd->qualityFlagM()<<"\t"<<temp<<std::endl;
          b->print();
          e->print();
          be->print();
          econd->print();
          econd_sub->print();
	  std::cout<<"Printing event Milos Test M is  "<<"\t"<<econd->qualityFlagM()<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
            std::cout << "Word " << std::setw(3) << i << " ";
            std::cout << std::hex << std::setfill('0');
            std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
            std::cout << std::dec << std::setfill(' ');
            // std::cout << std::hex << std::setfill('0');
          }

	}

       if(!econd->qualityFlagM())
        {
	  bool temp = false;
	  ncount_econd_M++;
	  if(ncount_econd_M<100){
	    std::cout<< "Alp- Milos Test M is  "<<"\t"<<econd->qualityFlagM()<<"\t"<<temp<<std::endl;
          b->print();
          e->print();
          be->print();
          econd->print();
          econd_sub->print();
	  //	  if(ncount_econd_M<100){
          std::cout<<"Printing event Milos Test M is  "<<"\t"<<econd->qualityFlagM()<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
            std::cout << "Word " << std::setw(3) << i << " ";
            std::cout << std::hex << std::setfill('0');
            std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
            std::cout << std::dec << std::setfill(' ');
            // std::cout << std::hex << std::setfill('0');
          }
	  }

        }

      }
      //error of mismatch in orbit, bx, event counter
      if(round(SLink_Orbit_counter)!=be->orbitCounter()){
	//	std::cout<< "Orbit mismatch "<<std::endl;
        // b->print();
        // e->print();
        // be->print();
	orbit_mismatch++;
	counter_print4++;	
	if(counter_print4<50){
	  std::cout<< "Orbit mismatch "<<std::endl;
	  b->print();
	  e->print();
	  be->print();
	  econd->print();
	  econd_sub->print();
	}
	//std::cout<<"Printing Orbit mismatch Alp - serious issue "<<std::endl;
      }
      if(round(SLink_eve_counter)!=be->eventCounter()){
	std::cout<< "Event mismatch "<<"\t"<<(b->eventId()%64)<<"\t"<<SLink_eve_counter<<"\t"<<be->eventCounter()<<std::endl;
        b->print();
        e->print();
        be->print();
	econd->print();
        econd_sub->print();
        eve_mismatch++;
	counter_print3++;
        if(counter_print3<50) {
          std::cout<<"Printing event mismatch Alp - serious issue "<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
            std::cout << "Word " << std::setw(3) << i << " ";
            std::cout << std::hex << std::setfill('0');
            std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
            std::cout << std::dec << std::setfill(' ');
            // std::cout << std::hex << std::setfill('0');
          }
	}
      }

      if((e->bxId()+4)!=be->bunchCounter()){
	counter_print2++;
	bx_mismatch++;
	if(counter_print2<50) {
	  std::cout<< "BX mismatch "<<"\t"<<e->bxId()<<"\t"<<be->bunchCounter()<<std::endl;	
        b->print();
        e->print();
        be->print();
        bx_mismatch++;
          std::cout<<"Printing BX mismatch Alp "<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
            std::cout << "Word " << std::setw(3) << i << " ";
            std::cout << std::hex << std::setfill('0');
            std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
            std::cout << std::dec << std::setfill(' ');
            // std::cout << std::hex << std::setfill('0');
          }
	}
      }      
      if(unsigned(be->econdStatus(0))!=0){
	std::cout<< "invalid econdStatus "<<std::endl;
	b->print();
	e->print();
	be->print();
	econd->print();
	econd_sub->print();
	ncount_econdStat++;
	if(unsigned(be->econdStatus(0))==4){
	  h_BXCounter_SLinkvsDAQ_EconStatus4->Fill(e->bxId(),be->bunchCounter());
          h_OrbCounter_SLinkvsDAQ_EconStatus4->Fill(SLink_Orbit_counter,be->orbitCounter());
          h_eventCounter_SLinkvsDAQ_EconStatus4->Fill(SLink_eve_counter,be->eventCounter());
	  h_eventCounter_ECONDvsSlink_EcondStatus4->Fill(SLink_eve_counter,econd->event());
	  h_eventCounter_ECONDvsDaq_EcondStatus4->Fill(be->eventCounter(),econd->event());
	  h_orbitCounter_ECONDvsSlink_EcondStatus4->Fill(SLink_Orbit_counter,econd->orbit());
	  h_orbitCounter_ECONDvsDaq_EcondStatus4->Fill(be->orbitCounter(),econd->orbit());
	  h_bxCounter_ECONDvsSlink_EcondStatus4->Fill(e->bxId(),econd->bx());
	  h_bxCounter_ECONDvsDaq_EcondStatus4->Fill(be->bunchCounter(),econd->bx());	  
	  counter_print1++;
	  
          if(counter_print1<50) {
	  std::cout<<"Printing Alp_Status-4 "<<std::endl;
	  for(unsigned i(0);i<rEvent->payloadLength();i++) {
	    std::cout << "Word " << std::setw(3) << i << " ";
	    std::cout << std::hex << std::setfill('0');
	    std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
	    std::cout << std::dec << std::setfill(' ');
	    // std::cout << std::hex << std::setfill('0');
	  }
	  std::cout<<std::endl;
	  }
	}
	if(unsigned(be->econdStatus(0))==5){
	  h_BXCounter_SLinkvsDAQ_EconStatus5->Fill(e->bxId(),be->bunchCounter());
	  h_OrbCounter_SLinkvsDAQ_EconStatus5->Fill(SLink_Orbit_counter,be->orbitCounter());
	  h_eventCounter_SLinkvsDAQ_EconStatus5->Fill(SLink_eve_counter,be->eventCounter());
	   h_eventCounter_ECONDvsSlink_EcondStatus5->Fill(SLink_eve_counter,econd->event());
          h_eventCounter_ECONDvsDaq_EcondStatus5->Fill(be->eventCounter(),econd->event());
          h_orbitCounter_ECONDvsSlink_EcondStatus5->Fill(SLink_Orbit_counter,econd->orbit());
          h_orbitCounter_ECONDvsDaq_EcondStatus5->Fill(be->orbitCounter(),econd->orbit());
          h_bxCounter_ECONDvsSlink_EcondStatus5->Fill(e->bxId(),econd->bx());
          h_bxCounter_ECONDvsDaq_EcondStatus5->Fill(be->bunchCounter(),econd->bx());
	  counter_print++;
	  if(counter_print<50){
	  std::cout<<"Printing Alp_Status-5 "<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
	    std::cout << "Word " << std::setw(3) << i << " ";
	    std::cout << std::hex << std::setfill('0');
	    std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
	    std::cout << std::dec << std::setfill(' ');
	    // std::cout << std::hex << std::setfill('0');
          }	  
	  std::cout<<std::endl;
        }
	}
	if(unsigned(be->econdStatus(0))==3){
          h_BXCounter_SLinkvsDAQ_EconStatus3->Fill(e->bxId(),be->bunchCounter());
          h_OrbCounter_SLinkvsDAQ_EconStatus3->Fill(SLink_Orbit_counter,be->orbitCounter());
          h_eventCounter_SLinkvsDAQ_EconStatus3->Fill(SLink_eve_counter,be->eventCounter());
	  h_eventCounter_ECONDvsSlink_EcondStatus3->Fill(SLink_eve_counter,econd->event());
          h_eventCounter_ECONDvsDaq_EcondStatus3->Fill(be->eventCounter(),econd->event());
          h_orbitCounter_ECONDvsSlink_EcondStatus3->Fill(SLink_Orbit_counter,econd->orbit());
          h_orbitCounter_ECONDvsDaq_EcondStatus3->Fill(be->orbitCounter(),econd->orbit());
          h_bxCounter_ECONDvsSlink_EcondStatus3->Fill(e->bxId(),econd->bx());
          h_bxCounter_ECONDvsDaq_EcondStatus3->Fill(be->bunchCounter(),econd->bx());

	  counter_print6++;
          if(counter_print6<50){
          std::cout<<"Printing Alp_Status-3 "<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
            std::cout << "Word " << std::setw(3) << i << " ";
            std::cout << std::hex << std::setfill('0');
            std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
            std::cout << std::dec << std::setfill(' ');
            // std::cout << std::hex << std::setfill('0');
          }
          std::cout<<std::endl;
	  }
        }
	 if(unsigned(be->econdStatus(0))==1){
	   //counter_print6++;
          //if(counter_print6<50){
          std::cout<<"Printing Alp_Status-1 suspicious "<<std::endl;
          for(unsigned i(0);i<rEvent->payloadLength();i++) {
            std::cout << "Word " << std::setw(3) << i << " ";
            std::cout << std::hex << std::setfill('0');
            std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
            std::cout << std::dec << std::setfill(' ');
	    //            std::cout << std::hex << std::setfill('0');
          }
          std::cout<<std::endl;
          }        	
      }
      //      counter_print5=0;
      if(e->eventLength()!=62){
	std::cout<< "invalid event length "<<std::endl;
	b->print();
	e->print();
	be->print();
        econd->print();
        econd_sub->print();
	h_eventCounter_SLinkvsDAQ_EvenLength1->Fill(SLink_eve_counter,be->eventCounter());
	h_BXCounter_SLinkvsDAQ_EvenLength1->Fill(e->bxId(),be->bunchCounter());
	h_OrbCounter_SLinkvsDAQ_EvenLength1->Fill(SLink_Orbit_counter,be->orbitCounter());
	
	if(e->eventLength()>40 && e->eventLength()<62){
	  flag_toPrint=1;
	  counter_print5=0;
	  std::cout<<"Printing Alp_Status-length "<<std::endl;
	for(unsigned i(0);i<rEvent->payloadLength();i++) {
	  std::cout << "Word " << std::setw(3) << i << " ";
	  std::cout << std::hex << std::setfill('0');
	  std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
	  std::cout << std::dec << std::setfill(' ');
	  //std::cout << std::hex << std::setfill('0');
	}
	std::cout<<std::endl;
	}
	ncount_eventLength++;
      }
      
      if(counter_print5<10 && counter_print5>1 && flag_toPrint)
	{
	  counter_print5++;
	  b->print();
	  e->print();
	  be->print();
	  econd->print();
	  econd_sub->print();
	  std::cout<<"Printing Alp_Status-length Next events"<<std::endl;
        for(unsigned i(0);i<rEvent->payloadLength();i++) {
          std::cout << "Word " << std::setw(3) << i << " ";
          std::cout << std::hex << std::setfill('0');
          std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
          std::cout << std::dec << std::setfill(' ');
          //std::cout << std::hex << std::setfill('0');
        }
        std::cout<<std::endl;
        }	
      h_eventLength_vsBXcounter->Fill(e->bxId(),e->eventLength());
      h_eventLength_vsECONDStatus->Fill(e->eventLength(),int(be->econdStatus(0)));
      h_Econd_status->Fill(int(be->econdStatus(0)));
      event_flag = 1;
      if((b->eventId()-event_IDCounter)>1)
	event_flag = 0;			
      if(event_flag==0)
	{
	  std::cout<< "invalid event counter jumped"<<"\t"<<b->eventId()<<"\t"<<event_IDCounter<<"\t"<<event_flag<<"\t"<<std::endl;
	  b->print();
	  e->print();
	  be->print();
	  econd->print();
	  econd_sub->print();
	  event_IDCounter++;
	  for(unsigned i(0);i<rEvent->payloadLength();i++) {
          std::cout << "Word " << std::setw(3) << i << " ";
          std::cout << std::hex << std::setfill('0');
          std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
          std::cout << std::dec << std::setfill(' ');
          //std::cout << std::hex << std::setfill('0');
	  }	        
        std::cout << std::endl;
        }

      h_Flag_inEvent->Fill(event_flag);
      event_IDCounter = b->eventId();
      //std::cout<<"Alpana check "<<int(be->econdStatus(0))<<"\t"<<e->totalBx()<<std::endl;
      h_EcondSta_vsBX->Fill(e->totalBx(),int(be->econdStatus(0)));
      h_EcondSta_vsBXcounter->Fill(e->bxId(),int(be->econdStatus(0)));
      h_EcondSta_vsEventcounter->Fill(b->eventId(),int(be->econdStatus(0)));
      
      sprintf(line,"%d %d %d %lu\n",int(b->eventId()),int(e->bxId()),int(e->orbitId()),uint64_t(e->totalBx()));
      //      myfile_all<<line;

	if(nEvents<=10) {
	  b->print();
	  e->print();
	  be->print();
	  std::cout<<"e->eventLength() "<<e->eventLength()<<" b->eventId() "<<b->eventId()<<std::endl;
	  std::cout<<"e->bxId() "<<e->bxId()<<" e->orbitId() "<<e->orbitId()<<" e->crc() "<<e->crc()<<std::endl;
      	for(unsigned i(0);i<rEvent->payloadLength();i++) {		
	  std::cout << "Word " << std::setw(3) << i << " ";
	  std::cout << std::hex << std::setfill('0');
	  std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
	  std::cout << std::dec << std::setfill(' ');
	  // std::cout << std::hex << std::setfill('0');
          // if(i >= 4 && i < 40){
          //   if( i == 4) std::cout << "ECONT output" << std::endl;
          //   std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
          // }

          // if(i >= 41 && i < 95){
          //   if( i == 41) std::cout << "ECONT unpacker output" << std::endl;
          //   std::cout << "0x" << std::setw(16) << p64[i] << std::endl;
          // } 
          // std::cout << std::dec << std::setfill(' ');
      	      }
	std::cout << std::endl;
	}
    }
  }
  
  std::cout << "Total number of events found = " << nEvents << std::endl;
  std::cout<< "Total number of events found with invalid pattern at BOE = "<<ncount_boe<<std::endl;
  std::cout<< "Total number of events found with invalid pattern at EOE = "<<ncount_eoe<<std::endl;
  std::cout<< "Total number of events found with invalid bxID = "<< ncount_bxID<<std::endl;
  std::cout<< "Total number of events found with invalid ECON-D status= "<<ncount_econdStat<<std::endl;
  std::cout<< "Total number of events found with with invalid Event ID counter = "<<event_IDCounter<<std::endl;

  std::cout<<" Total number of events found with orbit mismatch= "<<orbit_mismatch<<std::endl;
  std::cout<<" Total number of events found with bx mismatch = "<<bx_mismatch<<std::endl;
  std::cout<<" Total number of events found with event mismatch = "<<eve_mismatch<<std::endl;
    std::cout<<" Total number of events found with invalid bx for econd = "<<ncount_bx_econd<<std::endl;

  fout->cd();
  // h_EcondSta_vsBX->Write();
  // h_validPattern_EoE->Write();
  // h_validPattern_BoE->Write();
  // h_eventLength->Write();
  // h_Flag_inEvent->Write();
  // h_BXnumber->Write();
  // h_Econd_status->Write();
  // h_CRCflag->Write();
  // h_DAQCRCvsCRC->Write();
  // h_orbCounter->Write();
  // h_eventCounter->Write();
  // h_EcondSta_vsBX->Write();
  // h_EcondSta_vsBXcounter->Write();
  // h_EcondSta_vsEventcounter->Write();
  // h_eventLength_vsBXcounter->Write();
  // h_eventLength_vsECONDStatus->Write();
  // //h_eventLength_vsEventCounter->Write();
  // h_eventCounter_SLinkvsDAQ->Write();
  // h_BXCounter_SLinkvsDAQ->Write();
  // h_OrbCOunter_SLinkvsDAQ->Write();
  // h_eventCounter_SLinkvsDAQ_EconStatus5->Write();
  // h_BXCounter_SLinkvsDAQ_EconStatus5->Write();
  // h_OrbCounter_SLinkvsDAQ_EconStatus5->Write();
  // h_eventCounter_SLinkvsDAQ_EconStatus4->Write();
  // h_BXCounter_SLinkvsDAQ_EconStatus4->Write();
  // h_OrbCounter_SLinkvsDAQ_EconStatus4->Write();
  // h_eventCounter_SLinkvsDAQ_EvenLength1->Write();
  // h_BXCounter_SLinkvsDAQ_EvenLength1->Write();
  // h_OrbCounter_SLinkvsDAQ_EvenLength1->Write();
    fout->Write();
  fout->Close();
  //  h_EcondSta_vsBX->Write();
  delete rxxx;
  
  return 0;
}
